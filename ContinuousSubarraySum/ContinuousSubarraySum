/*
523. Continuous Subarray Sum

Given a list of non-negative numbers and a target integer k, 
write a function to check if the array has a continuous 
subarray of size at least 2 that sums up to the multiple of k, 
that is, sums up to n*k where n is also an integer.

Example 1:

Input: [23, 2, 4, 6, 7],  k=6
Output: True
Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.

Example 2:

Input: [23, 2, 6, 4, 7],  k=6
Output: True
Explanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.

Note:

    The length of the array won't exceed 10,000.
    You may assume the sum of all the numbers is in the range of a signed 32-bit integer.

*/

static const auto ______ = []() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  return nullptr;
}();

class Solution {
public:
    bool checkSubarraySum(vector<int>& nums, int k) {
        if (nums.size() < 2)
            return false;
        if (k==0) {
            for (int i=0; i<nums.size()-1; ++i)
                if (nums[i] == 0 && nums[i+1] ==0)
                    return true;
            return false;
        }
     
        std::vector<int> remainers(nums.size(), 0); // -> {5, 1, 1, 5, 0}
        int sum(0);
        for (int i=0; i<nums.size(); ++i) {
            sum += nums[i];
            remainers[i] = sum  % k;
            if (i > 0 && remainers[i] == 0)
                return true;
        }
        bool result = isTwoEqualValues(remainers);
        return result;            
    }
    bool isTwoEqualValues(const std::vector<int> values) {
        std::unordered_set<int> lookup_values;
        for (int i=0; i<values.size(); ++i)
            if(lookup_values.find(values[i])!=lookup_values.end())
                return true;
            else
                lookup_values.insert(values[i]);
        return false;
    }
};
